source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
help("heatmap.2")
body(heatmap.2)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
H
save.image("./backup.RData")
c <- cutree(as.hclust(hc), 10)
c <- cutree(as.hclust(hc), 10)
hc <- H$h1$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
c <- cutree(as.hclust(hc), 10)
hc <- H$h2$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
c <- cutree(as.hclust(hc), 10)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
hc <- H$h1$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
hc <- H$h1$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
save.image("./backup.RData")
hc <- H$h1$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
c <- cutree(as.hclust(hc), 10)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
hc <- H$h1$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
c <- cutree(as.hclust(hc), 10)
#   d <- as.dist(coOc_Ctrl)
d <- t(coOc_Ctrl)
save.image("./backupNON.RData")
hc <- H$h1$rowDendrogram
plot(as.hclust(hc), main="Dendrogramma", sub="Ricavato dalla heatmap")
hc.rows <- hclust(m)
m <- coOc_Ctrl
hc.rows <- hclust(m)
m <- coOc_Ctrl
hc.rows <- hclust(m)
hc.rows <- hclust(m)
m <- coOc_Ctrl
m
dim(m)
which(m <= 0)
view(m)
View(m)
hc.rows <- hclust(m)
m/3
dm <- dist(m)
View(dm)
dm
?dist
dm <- dist(m)
hc.rows <- hclust(m)
hc.rows <- hclust(dm)
hc.col <- hclust(t(dm))
plot(hc.rows)
plot(hc.col)
H <- heatmap.2(t(dm), tracecol = F, main = "Community Sum")
H <- heatmap.2(t(m), tracecol = F, main = "Community Sum")
he <- H$rowDendrogram
plot(he)
cutree(he)
cutree(as.hclust(he))
cut(he)
he
cut(he, h=1)
?cut
?cut
cut(he, 3)
cut(he, 3)
plot(hc.rows)
plot(hc.col)
hc
cutree(hc)
cutree(hc.rows)
cutree(hc.rows, 10)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
s <- "aaab"
grep(s, "*b")
sub("*b", "OSCE", s)
s <- "aaaaa/grap.hh"
sub("*graph*", "OSCE", s)
sub("*ZZZ*", "OSCE", s)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
coOc_Ctrl
mantel_test <- function(m1, m2, b = 9000) {
d1 <- as.dist(coOc_Ctrl)
d2 <- as.dist(coOc_Ptnt)
m <- mantel.rtest(d1, d2, b)
return(m)
}
m <- mantel_test(coOc_Ctrl, coOc_Ptnt)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
mantel_test <- function(m1, m2, b = 9000) {
d1 <- as.dist(coOc_Ctrl)
d2 <- as.dist(coOc_Ptnt)
m <- mantel.rtest(d1, d2, b)
return(m)
}
p <- mantel_test(coOc_Ctrl, coOc_Ptnt)
p
coOc_Ctrl <- coOccurrence(pathOutC)
coOc_Ptnt <- coOccurrence(pathOutP)
pathInC = "./../../../data/toyData/cutted_controls/"
pathInP = "./../../../data/toyData/cutted_patients/"
pathOutC = "./../../../data/toyData/results/3_community_spectral/cutted/membership_controls.csv"
pathOutP = "./../../../data/toyData/results/3_community_spectral/cutted/membership_patients.csv"
pathOutResults = "./../../../data/toyData/results/3_community_spectral/cutted/"
coOc_Ctrl <- coOccurrence(pathOutC)
coOc_Ptnt <- coOccurrence(pathOutP)
m <- mantel_test(coOc_Ctrl, coOc_Ptnt, 9000)
m
plotF(coOc_Ptnt+coOc_Ctrl, 10, pathInC, paste(pathOutResults, "graphBoth.jpg", sep = ""), FALSE)
pathInC = "./../../../data/toyData/t_test_controls/"
pathInP = "./../../../data/toyData/t_test_patients/"
pathOutC = "./../../../data/toyData/results/3_community_spectral/t_test_cutted/membership_controls.csv"
pathOutP = "./../../../data/toyData/results/3_community_spectral/t_test_cutted/membership_patients.csv"
pathOutResults = "./../../../data/toyData/results/3_community_spectral/t_test_cutted/"
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
debugSource('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
write.csv("./../../../data/toyData/results/3_community_spectral/mantel.csv", l_m, sep=",")
l_m[[1]]
l_m[[1]]$sim
str(l_m[[1]])
l_m[[,]]
l_m[[,]]
unlist(l_m)
mantel_test(coOc_Ctrl, coOc_Ptnt, 9000)$sim
mantel_test(coOc_Ctrl, coOc_Ptnt, 9000)$pvalue
debugSource('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
write.csv("./../../../data/toyData/results/3_community_spectral/mantel.csv", l_m, sep=",")
l_m
write.csv(l_m, "./a.csv")
write.csv("./../../../data/toyData/results/3_community_spectral/mantel.csv", l_m,)
write.csv("./../../../data/toyData/results/3_community_spectral/mantel.csv", l_m)
write.csv(l_m, "./../../../data/toyData/results/3_community_spectral/mantel.csv")
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
l_m
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
l_m
load("./backup.RData")
vc <- as.vector(coOc_Ctrl)
vp <- as.vector(coOc_Ptnt)
install.packages("infotheo")
H1 <- mutinformation(vc, vp, method="emp")
library(infotheo)
H1 <- mutinformation(vc, vp, method="emp")
?mutinformation
H1 <- mutinformation(vc, vp, method="shrink")
dvc <- discretize( X, disc="equalfreq", nbins=NROW(X)^(1/3) )
dvc <- discretize( vc, disc="equalfreq", nbins=NROW(X)^(1/3) )
dvc <- discretize( vc, disc="equalfreq", nbins=NROW(vc)^(1/3) )
dvp <- discretize( vp, disc="equalfreq", nbins=NROW(vc)^(1/3) )
H1 <- mutinformation(dvc, dvp, method="shrink")
H2 <- entropy(dvc)
H3 <- entropy(dvp)
r <- 2*(H1/H2)
r <- 2*(H1/H2+H3)
r
r <- (H1/mean(H2+H3))
r
r <- 2*(H1/(H2+H3))
r
r <- (H1/sqrt(H2+H3))
r
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
library(igraph)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
help(igraph)
install.packages("igraph")
install.packages("igraph")
install.packages("ade4")
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
?mutinformation
library(infotheo)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
Ec1 <- entropy(dvc1)
Ep1 <- entropy(dvp1)
MUN <- 2* (MU1 / (Ec1 + Ep1))
MUN
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
MU1
MU
MUN
MUN2
MUN3
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
MUN1
dvp1
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
MU1
MUN1
MUN2
MUN3
MUN3 <- 2* (MU3 / (Ec3 + Ep3))
MU3 <- mutinformation(dvp3,dvc3)
Ec3 <- entropy(dvc3)
Ep3 <- entropy(dvp3)
MUN3 <- 2* (MU3 / (Ec3 + Ep3))
MU3 <- mutinformation(dvp3,dvc3)
Ec3 <- entropy(dvc3)
Ep3 <- entropy(dvp3)
MUN3 <- 2* (MU3 / (Ec3 + Ep3))
MU3 <- mutinformation(dvp3,dvc3)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
save.image("./info_map.RData")
MUN1
MUN2
MUN3
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
save.image("./comm_spectral.R")
MUN1
MUN2
MUN3
x3 <- sample(1:10, 1)
x3
x3 <- sample(1:3, 1)
x3
load("./info_map.RData")
ls()
MU1
load(".RData")
MU1
load(".Rhistory")
load(".RData")
MU2
ls()
load(".RData")
ls()
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
MU1
MU2
MU3
save.image()
help("t.test")
MUN1
MUN2
MUN3
?infomap.community
load("./info_map.RData")
plotF(coOc_Ptnt3+coOc_Ctrl3, 10, pathInC, paste(pathOutResults, "graphBoth.jpg", sep = ""), FALSE)
plotF(coOc_Ptnt3+coOc_Ctrl3, 10, pathInC, paste(pathOutResults, "graphBoth.jpg", sep = ""), FALSE)
g
debugSource('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
hcc
hcc <- as.vector(hcc)
hcc
plot(g, vertex.color = hcc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
hcc[59]
hcc[60]
plot(g, vertex.color =list(heat.colors(hcc)), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(g, vertex.color =list(heat.colors(10)), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
heat.colors(5)
heat.colors(10)
plot(g, vertex.color =list(heat.colors(10)), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
g
plot(g, vertex.color =heat.colors(10), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(g, vertex.color =heat.colors(10), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(1:5)
plot(g, vertex.color =heat.colors(10), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(g, vertex.color =heat.colors(10), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
debugSource('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
plot(g, vertex.color = heat.colors(k), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(g, vertex.color = heat.colors(k), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
dev.off()
plot(g, vertex.color = heat.colors(k), vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
cl <- palette(rainbow(10))     # six color rainbow
(palette(gray(seq(0,.9,len = 25))))
cl
plot(g, vertex.color = cl, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
cl
cl
cl <- palette(rainbow(10))     # six color rainbow
(palette(gray(seq(0,.9,len = 25))))
cl
cl <- palette(rainbow(10))     # six color rainbow
(palette(gray(seq(0,.9,len = 25))))
cl <- palette(rainbow(10))     # six color rainbow
cl <- (palette(gray(seq(0,.9,len = 25))))
cl
plot(g, vertex.color = cl, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
hcc
hcc^2
hcc
hcc*hcc
hcc
hcc
hcc^2
as.vector(hcc)
a <- as.vector(hcc)
a^2
plot(g, vertex.color = hcc^2, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(g, vertex.color = hcc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
source('~/Scrivania/neuroscience/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
save.image()
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
pie(rep(1,n), col=rainbow(n))
pie(rep(1,10), col=rainbow(n))
pie(rep(1,10), col=rainbow(10))
pie(rep(1,10), col=rainbow(10))
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
pie(rep(1,10), col=rainbow(10))
plot.igraph(g, vertex.color = hcc, edge.arrow.mode = 0, layout=coords[,-3])
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
pie(rep(1,10), col=rainbow(10))
pie(rep(1,n), col=topo.colors(n)
)
pie(rep(1,10), col=topo.colors(10))
pie(rep(1,10), col= palette(rainbow(10))
)
pie(rep(1,10), col= rainbow(10))
pie(rep(1,10), col= rainbow(10))
?rainbow
pie(rep(1,10), col= rainbow(10, s = 1))
library(RColorBrewer)
darkcols <- brewer.pal(10, "Dark2")
hist(discoveries,
col = darkcols)
library(RColorBrewer)
darkcols <- brewer.pal(8, "Dark2")
pie(rep(1,10), col= darkcols)
darkcols
darkcols <- brewer.pal(10, "Dark2")
pie(rep(1,10), col= rainbow(10, s = 1))
col
c <- raibow(10)
c <- rainbow(10)
cl <- rainbow(10)
cl
for(i in 1:10){
hccc <- replace(hcc, hcc = i, cl[i])
}
plot(g, vertex.color = hcc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
plot(g, vertex.color = hccc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
hccc
for(i in 1:10){
hccc <- replace(hcc, hcc = i, cl[i])
}
hccc
hccc <- hcc
hccc
for(i in 1:10){
hccc <- replace(hcc, hcc = i, cl[i])
}
hccc
hccc <- replace(hcc, hcc == 1, cl[1])
hccc
for(i in 1:10){
hccc <- replace(hcc, hcc == i, cl[i])
}
hccc
hccc <- hcc
for(i in 1:10){
hccc <- replace(hcc, hcc == i, cl[i])
}
hccc
hccc <- hcc
for(i in 1:10){
hccc <- replace(hccc, hccc == i, cl[i])
}
hccc
hccc <- hcc
for(i in 1:10){
hccc <- replace(hccc, hccc == i, cl[i])
print(hccc)
}
hccc <- hcc
for(i in 1:10){
hccc <- replace(hcc, hcc == i, cl[i])
}
hccc <- hcc
for(i in 1:10){
hccc <- replace(hcc, hcc == i, cl[i])
print(hccc)
}
hccc
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
hccc
hcc
hccc
hcc <- hcc
hccc <- hcc
hccc
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
hccc
plot(g, vertex.color = hcc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
pie(10, col=cl)
cl
pie((rep(1,10), col=cl)
pie(rep(1,10), col=cl)
plot(g, vertex.color = hccc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
pie(rep(1,10), col=topo.colors(10))
pie(rep(1,10), col=rainbow(10))
pie(rep(1,10), col=rainbow(10, s=0.5))
pie(rep(1,10), col=rainbow(10, s=1))
pie(rep(1,10), col=rainbow(10, s=1, n=10))
pie(rep(1,10), col=rainbow(10, s=1, n=1))
pie(rep(1,10), col=rainbow(10, s=1, n=0.5))
pie(rep(1,10), col=rainbow(10, s=1, n=0.1))
pie(rep(1,10), col=rainbow(10, s=1))
?rainbow
pie(rep(1,10), col=rainbow(10, s=1, v= 1))
pie(rep(1,10), col=rainbow(10, s=1, v= 0.5))
pie(rep(1,10), col=rainbow(10, s=1, v= 10))
pie(rep(1,10), col=rainbow(10, s=1, v= 0.7))
pie(rep(1,10), col=rainbow(10, s=1, v= 1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=10))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=9))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=0.1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=9/10))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=9/10, alpha=0.5))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=9/10, alpha=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=9/10, alpha=10))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=9/10, alpha=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=8/10, alpha=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=7/10, alpha=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=5/10, alpha=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=4/10, alpha=1))
pie(rep(1,10), col=rainbow(10, s=1, v= 1, start=0, end=7/10, alpha=1))
pie(rep(1,10), col=rainbow(10))
library(colorBrewer)
brewer.pal(7, "BrBG")
library(colorBrewer)
pie(rep(1,10), col=brewer.pal(7, "BrBG")
)
pie(rep(1,10), col=brewer.pal(10, "BrBG")
)
pie(rep(1,10), col=brewer.pal(9, "Set1"))
pie(rep(1,10), col=brewer.pal(9, "Set2"))
pie(rep(1,10), col=brewer.pal(10, "Set1"))
pie(rep(1,10), col=brewer.pal(10, "Set1"))
pie(rep(1,10), col=brewer.pal(10, "Set6"))
pie(rep(1,10), col=brewer.pal(10, "Set6", data="diverging"))
?brewer.pal
display.brewer.all()
display.brewer.pal(name = "Spectral" )
display.brewer.pal(10,name = "Spectral" )
pie(rep(1,10), col=brewer.pal(brewer.pal(10,name = "Spectral" ))
)
pie(rep(1,10), col=brewer.pal(10,name = "Spectral" ))
display.brewer.all(n=10, type="div", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
pie(rep(1,10), col=brewer.pal(10,name = "EdYIBu" ))
pie(rep(1,10), col=brewer.pal(10,name = "RdYIBu" ))
pie(rep(1,10), col=brewer.pal(10,name = "RdYlBu "))
pie(rep(1,10), col=brewer.pal(10,name = "RdYlBu"))
display.brewer.all(n=10, type="div", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
pie(rep(1,10), col=brewer.pal(10,name = "RdBu"))
display.brewer.all(n=10, type="div", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
pie(rep(1,10), col=brewer.pal(10,name = "Spectral"))
display.brewer.all(n=10, type="div", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
display.brewer.all(n=10, type="div", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
cl <- brewer.pal(10,name = "Spectral")
hccc <- hcc
for(i in 1:10){
hccc <- replace(hccc, hccc == i, cl[i])
}
hccc
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
plot(g, vertex.color = hcc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
cl
cl <- brewer.pal(10,name = "Spectral")
cl
hccc
display.brewer.all(n=10, type="div", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
plot(g, vertex.color = hccc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
debugSource('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
plot(g, vertex.color = hccc, vertex.size = 10, edge.arrow.mode = 0, layout = coords[,-3])
pie(rep(1,10), col=cl)
pie(rep(1,10), col=cl, main = "Colors")
Q
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
brewer.pal
brewer.pal(10,name = "RdYlBu")
library(RColorBrewer)
brewer.pal(10,name = "RdYlBu")
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/comm_spectral.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/communitySpectral/info_map.R', echo=TRUE)
