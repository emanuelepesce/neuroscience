gr <- set.vertex.attribute(gr, name = "area",value = V(g)$area)
gr <- set.vertex.attribute(gr, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gr
for(i in 1:ecount(gr)){
if(E(gr)$weight[i] <= 0){
rmv[k] <- E(gr)[i]
k = k+1
}
}
gr <- delete.edges(gr, rmv)
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
#   V(g)$name <- V(g)$area
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
gr
gc
gr
E(gr)
E(gr)[ยน]
E(gr)[1]
E(gr)$id[1]
E(gr)$name[1]
get.vertex.attribute(graph = gr, name = "area", index = 1)
d <- get.edge(gr, E(gr)[1])
d
get.vertex.attribute(graph = gr, name = "area", index = 1)
m <- matrix(nrow = 0, ncol=2)
k <- 1
insertRow(m,1)
insertRow(m,1)
m <- insertRow(m,1)
m <- insertRow(m,1)
m
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
saveResults(kc, kp, g)
saveResults(kc, kp, g)
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
saveResults <- function(kc, kp, g, path="./../../../data/toyData/controls/mst_first_100/"){
edgesLeft <- kc - kp
edgesRight <- kp - kc
common <- kc + kp
#left
gl <- graph.adjacency(edgesLeft, mode = "directed", weighted = TRUE);
gl <- set.vertex.attribute(gl, name = "area",value = V(g)$area)
gl <- set.vertex.attribute(gl, name = "cx",value = V(g)$cx)
gl <- set.vertex.attribute(gl, name = "cy",value = V(g)$cy)
gl <- set.vertex.attribute(gl, name = "cz",value = V(g)$cz)
gl <- set.vertex.attribute(gl, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gl
for(i in 1:ecount(gl)){
if(E(gl)$weight[i] <= 0){
rmv[k] <- E(gl)[i]
k = k+1
}
}
gl <- delete.edges(gl, rmv)
#right
gr <- graph.adjacency(edgesLeft, mode = "directed", weighted = TRUE);
gr <- set.vertex.attribute(gr, name = "area",value = V(g)$area)
gr <- set.vertex.attribute(gr, name = "cx",value = V(g)$cx)
gr <- set.vertex.attribute(gr, name = "cy",value = V(g)$cy)
gr <- set.vertex.attribute(gr, name = "cz",value = V(g)$cz)
gr <- set.vertex.attribute(gr, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gr
for(i in 1:ecount(gr)){
if(E(gr)$weight[i] <= 0){
rmv[k] <- E(gr)[i]
k = k+1
}
}
gr <- delete.edges(gr, rmv)
#common
gc <- graph.adjacency(edgesLeft, mode = "directed", weighted = TRUE);
gc <- set.vertex.attribute(gc, name = "area",value = V(g)$area)
gc <- set.vertex.attribute(gc, name = "cx",value = V(g)$cx)
gc <- set.vertex.attribute(gc, name = "cy",value = V(g)$cy)
gc <- set.vertex.attribute(gc, name = "cz",value = V(g)$cz)
gc <- set.vertex.attribute(gc, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gc
for(i in 1:ecount(gc)){
if(E(gc)$weight[i] <= 0){
rmv[k] <- E(gc)[i]
k = k+1
}
}
gc <- delete.edges(gc, rmv)
el <- edgesLabels(gl)
er <- edgesLabels(gr)
ec <- edgesLabels(gc)
write.csv(paste(path, "edge_controls.csv", sep=""))
write.csv(paste(path, "edge_patients.csv", sep=""))
write.csv(paste(path, "edge_common.csv", sep=""))
#   x <- V(g)$cx
#   y <- V(g)$cy
#   z <- V(g)$cz
#   coords <- cbind(x,y,z)
#   #   V(g)$name <- V(g)$area
#   rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
#           vertex.label.dist=0.5 )
}
saveResults(kc, kp, g)
edgeLabels <- function(g){
m <- matrix(nrow = 0, ncol=2)
k <- 1
for(i in 1:ecount(g)){
ed <-  get.edge(g, E(g)[i])
vs <- get.vertex.attribute(graph = g, name = "area", index = ed[1])
vt <- get.vertex.attribute(graph = g, name = "area", index = ed[2])
m <- insertRow(m, k, v = c(vs, vt))
k = k+1
}
return(m)
}
saveResults(kc, kp, g)
edgesLabels <- function(g){
m <- matrix(nrow = 0, ncol=2)
k <- 1
for(i in 1:ecount(g)){
ed <-  get.edge(g, E(g)[i])
vs <- get.vertex.attribute(graph = g, name = "area", index = ed[1])
vt <- get.vertex.attribute(graph = g, name = "area", index = ed[2])
m <- insertRow(m, k, v = c(vs, vt))
k = k+1
}
return(m)
}
saveResults(kc, kp, g)
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
rgl.postscript("persp3dd.pdf","pdf")
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
plot.new()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
plot.new()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
plot.new()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
plot.new()
frame()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
plot.new()
frame()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
x11()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
x11()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rgl.open()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
rgl.open()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
rgl.open()
rgl.bg(sphere=TRUE, color=c("white","blue"), lit=FALSE, back="lines" )
rgl.bg(sphere=TRUE, color=c("white","blue"), lit=FALSE)
rgl.bg(sphere=TRUE, color=c("white","blue"))
rgl.bg(sphere=TRUE)
rgl.bg(sphere=TRUE, color="white")
rgl.bg(sphere=TRUE, color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rgl.bg(sphere=TRUE)
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rgl.bg()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rgl.bg()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rgl.open()
rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rgl.open()
rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
#   rgl.open()
#   rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
#   rgl.open()
#   rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
#   rgl.open()
#   rgl.bg(color="white")
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rgl.open()
rgl.bg(color="white")
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
open3d()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
open3d()
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
open3d()
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
open3d()
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "yellow",
vertex.label.dist=0.5 )
rglplot(gc, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rglplot(gl, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
saveResults(kc, kp, g)
saveResults(kc, kp, g)
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "green",
vertex.label.dist=0.5 )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
gr <- graph.adjacency(edgesRight, mode = "directed", weighted = TRUE);
gr <- set.vertex.attribute(gr, name = "area",value = V(g)$area)
gr <- set.vertex.attribute(gr, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gr
for(i in 1:ecount(gr)){
if(E(gr)$weight[i] <= 0){
rmv[k] <- E(gr)[i]
k = k+1
}
}
gr <- delete.edges(gr, rmv)
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
#   V(g)$name <- V(g)$area
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
gr <- graph.adjacency(edgesRight, mode = "directed", weighted = TRUE);
gr <- set.vertex.attribute(gr, name = "area",value = V(g)$area)
gr <- set.vertex.attribute(gr, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gr
for(i in 1:ecount(gr)){
if(E(gr)$weight[i] <= 0){
rmv[k] <- E(gr)[i]
k = k+1
}
}
gr <- delete.edges(gr, rmv)
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
#   V(g)$name <- V(g)$area
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rgl.open()
rgl.bg(sphere=TRUE, color=c("grey","blue"), lit=FALSE, back="lines" )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rgl.open()
rgl.bg(sphere=TRUE, color="grey", lit=FALSE, back="lines" )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rgl.bg(sphere=TRUE, lit=FALSE, back="lines" )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
rgl.bg(sphere=TRUE, color = c("white", "blue"),lit=FALSE, back="lines" )
rgl.open()
rgl.open()
rgl.bg(sphere=TRUE, color = c("white", "blue"),lit=FALSE, back="lines" )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
gr <- graph.adjacency(edgesRight, mode = "directed", weighted = TRUE);
gr <- set.vertex.attribute(gr, name = "area",value = V(g)$area)
gr <- set.vertex.attribute(gr, name = "id",value = V(g)$id)
rmv <- list()
k <- 1
gnew <- gr
for(i in 1:ecount(gr)){
if(E(gr)$weight[i] <= 0){
rmv[k] <- E(gr)[i]
k = k+1
}
}
gr <- delete.edges(gr, rmv)
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
#   V(g)$name <- V(g)$area
rgl.open()
rgl.bg(sphere=TRUE, color = c("white", "blue"),lit=FALSE, back="lines" )
rglplot(gr, layout=coords, vertex.label = V(g)$area, vertex.size = 10, vertex.color = "red",
vertex.label.dist=0.5 )
gexf4 <- igraph.to.gexf(gr, coords)
install.packages("rgexf")
install.packages("rgexf", dep = T)
library(xgef)
library(rxgef)
library(rgexf)
install.packages("XML", dep = T)
install.packages("XML", dep = T)
install.packages("XML", dep = T)
library(rgexf)
install.packages("rgexf", dep = T)
library(rgexf)
gexf4 <- igraph.to.gexf(gr, coords)
gexf4 <- igraph.to.gexf(gr)
gr
igraph.to.gexf(gr)
?igraph.to.gexf
# A simple graph without
gexf1 <- read.gexf("http://gephi.org/datasets/LesMiserables.gexf")
igraph1 <- gexf.to.igraph(gexf1)
gexf2 <- igraph.to.gexf(igraph1)
igraph1
gr
gr <- set.vertex.attribute(gr, name = "name",value = V(g)$name)
gr
igraph.to.gexf(gr)
t.test(1:10, y = c(7:20)
)
t.test(1:10)
t.test(1:10, 0)
t.test(1:10, mu = 0)
gexf4 <- igraph.to.gexf(gr)
?igraph.to.gexf
gexf4 <- igraph.to.gexf(g)
gexf4 <- igraph.to.gexf(g, position=NULL)
igraph1
g
g
gr
str(g)
gexf3 <- read.gexf("http://gexf.net/data/data.gexf")
igraph2 <- gexf.to.igraph(gexf3)
gexf4 <- igraph.to.gexf(igraph2)
igraph2
demo(gexfigraph)
gexf4 <- igraph.to.gexf(g, position=NULL)
g
gexf4 <- igraph.to.gexf(g)
gr <- graph.adjacency(edgesRight, mode = "directed", weighted = TRUE);
gexf4 <- igraph.to.gexf(gr)
gr <- set.vertex.attribute(gr, name = "name",value = V(g)$name)
gexf4 <- igraph.to.gexf(gr)
gr
gr <- set.vertex.attribute(gr, name = "name",value = V(g)$area)
gr
gexf4 <- igraph.to.gexf(gr, coords)
coords
as.data.frame(coords)
c <- as.data.frame(coords)
gexf4 <- igraph.to.gexf(gr, c)
gr
V(g)
gexf4 <- igraph.to.gexf(gr, c)
c
c[1:3]
c[2:4]
c[2:3]
c[1:3]
gexf4 <- igraph.to.gexf(gr, c[1:3])
gexf4 <- igraph.to.gexf(gr, position=c[1:3])
demo(gexfattributes)
gexf4 <- igraph.to.gexf(gr, position=c[1:3])
gexf4
gr
V(g)
gr
V(g)
coords
coords[,68]
coords[60,]
coords[1:60,]
gexf4 <- igraph.to.gexf(gr, position=coords[1:68,])
write.gexf(nodes = V(g))
print(gexf4, file="try.gexf")
gexf4 <- igraph.to.gexf(gr, position=coords[1:68,])
print(gexf4, file="try.gexf")
source('~/Tesi/gitProject/neuroscience/source/R/mst_edges_check/mst_check.R', echo=TRUE)
