m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
pathfile <- paste("./imgs/", "a.png",sep="")
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/try.R', echo=TRUE)
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
pathfile <- paste("./imgs/", m, "a.png",sep="")
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
pathfile <- paste("./imgs/", m, ".png",sep="")
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
pathfile <- paste("./imgs/", m, ".png",sep="")
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
pathfile <- paste("./imgs/a", m, ".png",sep="")
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
pathfile <- paste("./imgs/000", m, ".png",sep="")
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
if(m<10){
pathfile <- paste("./imgs/00", m, ".png",sep="")
}
if(m<100){
pathfile <- paste("./imgs/00", m, ".png",sep="")
}
else{
pathfile <- paste("./imgs/", m, ".png",sep="")
}
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
if(m<10){
pathfile <- paste("./imgs/00", m, ".png",sep="")
}
if(m<100){
pathfile <- paste("./imgs/0", m, ".png",sep="")
}
else{
pathfile <- paste("./imgs/", m, ".png",sep="")
}
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
m = 1
while(m <= length(infected)){
V(g)$color = "white"
V(g)$color[V(g)%in%infected[[m]]] = "red"
if(m<10){
pathfile <- paste("./imgs/00", m, ".png",sep="")
}
else if(m<100){
pathfile <- paste("./imgs/0", m, ".png",sep="")
}
else{
pathfile <- paste("./imgs/", m, ".png",sep="")
}
#   png(file=pathfile)
plot(g, layout =layout.old, main= m)
dev.copy(png,filename=pathfile);
m = m + 1
dev.off()
}
g <- read.graph("./CTRL_amore.gml", format="gml")
seeds_num = 1
set.seed(2014); diffusers = sample(V(g),seeds_num) ; diffusers
infected =list()
infected[[1]]= diffusers
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
g <- read.graph("./CTRL_amore.gml", format="gml")
seeds_num = 1
set.seed(2014); diffusers = sample(V(g),seeds_num) ; diffusers
infected =list()
infected[[1]]= diffusers
p = 0.128
coins = c(rep(1, p*1000), rep(0,(1-p)*1000))
n = length(coins)
sample(coins, 1, replace=TRUE, prob=rep(1/n, n))
update_diffusers = function(diffusers){
nearest_neighbors = neighborhood(g, 1, diffusers)
nearest_neighbors = data.frame(table(unlist(nearest_neighbors)))
nearest_neighbors = subset(nearest_neighbors, !(nearest_neighbors[,1]%in%diffusers))
# toss the coins
toss = function(freq) {
tossing = NULL
for (i in 1:freq ) tossing[i] = sample(coins, 1, replace=TRUE, prob=rep(1/n, times=n))
tossing = sum(tossing)
return (tossing)
}
keep = unlist(lapply(nearest_neighbors[,2], toss))
new_infected = as.numeric(as.character(nearest_neighbors[,1][keep >= 1]))
diffusers = unique(c(diffusers, new_infected))
return(diffusers)
}
i = 1
while(length(infected[[i]]) < size){
infected[[i+1]] = sort(update_diffusers(infected[[i]]))
cat(length(infected[[i+1]]), "\n")
i = i + 1
}
num_cum = unlist(lapply(1:i, function(x) length(infected[x]) ))
p_cum = num_cum/max(num_cum)
time = 1:i
png(file = "./temporal_growth_curve.png",
width=5, height=5,
units="in", res=300)
plot(p_cum~time, type = "b")
dev.off()
E(g)$color = "blueviolet"
V(g)$color = "white"
set.seed(2014); layout.old = layout.fruchterman.reingold(g)
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
plot(g, layout =layout.old)
set.seed(2014); layout.old = layout.fruchterman.reingold(g,niter=500,area=vcount(g)^2.3,repulserad=vcount(g)^2.8))
set.seed(2014); layout.old = layout.fruchterman.reingold(g,niter=500,area=vcount(g)^2.3,repulserad=vcount(g)^2.8)
plot(g, layout =layout.old)
set.seed(2014); layout.old = layout.fruchterman.reingold(g,niter=500,area=vcount(g)^2.3,repulserad=vcount(g)^10)
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
set.seed(2014); layout.old = layout.fruchterman.reingold(g,niter=500,area=vcount(g)^10,repulserad=vcount(g)^10)
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
plot(g, layout =layout.old)
plot(g, layout =layout.old)
set.seed(2014); layout.old = layout.fruchterman.reingold(g)*10
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
E(g)$color = "blueviolet"
V(g)$color = "white"
set.seed(2014); layout.old = layout.fruchterman.reingold(g)*10
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
E(g)$color = "blueviolet"
V(g)$color = "white"
set.seed(2014); layout.old = layout.fruchterman.reingold(g)*100
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
E(g)$color = "blueviolet"
V(g)$color = "white"
set.seed(2014); layout.old = layout.fruchterman.reingold(g)*100
V(g)$color[V(g)%in%diffusers] = "red"
plot(g, layout =layout.old)
layout.old = layout.fruchterman.reingold(g)*100
plot(g, layout =layout.old)
layout.old = layout.fruchterman.reingold(g)*1000
plot(g, layout =layout.old)
layout.old = layout.fruchterman.reingold(g, arrow.size=0)*1000
plot(g, layout =layout.old)
layout.old = layout.fruchterman.reingold(g, arrow.mode="-")
plot(g, layout =layout.old)
plot(g, layout =layout.old, arrow.mode = "-")
plot(g, layout =layout.old, arrow.mode = 0)
plot.igraph(g)
plot.igraph(g, arrow.mode = 0)
plot.igraph(g, edge.arrow.mode = 0)
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
coords <- cbind(x,y,z)
plot.igraph(g, edge.arrow.mode = 0, layout=coords)
E(g)$color = "blueviolet"
V(g)$color = "white"
set.seed(2014);
# layout.old = layout.fruchterman.reingold(g)*100
V(g)$color[V(g)%in%diffusers] = "red"
plot.igraph(g, edge.arrow.mode = 0, layout=coords)
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
coins
plot.igraph(g, edge.arrow.mode = 0, layout=coords, main = "a")
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
p = 0.128
coins = c(rep(1, p*1000), rep(0,(1-p)*1000))
coins
sample(coins, 1, replace=TRUE, prob=rep(1/n, n))
coins
?neigh
?neighborhood
diffuesers
diffusers
nearest_neighbors = neighborhood(g, 1, diffusers)
size
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/epidemics/mytry.R', echo=TRUE)
nearest_neighbors = neighborhood(g, 1, diffusers)
nearest_neighbors
nearest_neighbors = data.frame(table(unlist(nearest_neighbors)))
nearest_neighbors
nearest_neighbors = subset(nearest_neighbors, !(nearest_neighbors[,1]%in%diffusers))
nearest_neighbors
freq
diffusers
infected
neighborhood(g, "V1")
neighborhood(g, 1)
neighborhood(g, 1)
neighborhood(g, 1, 1)
neighborhood(g, 1, 2)
neighborhood(g, 1, "V1")
