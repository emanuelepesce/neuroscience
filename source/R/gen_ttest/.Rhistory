pr <- read.graph(prova, format = "gml")
pr <- i_adjacencyFromFile(prova)
pr
E[1]
E[g](1)
E(g)[1]
E(pr)[1]
E(g)[7006]
E(pr)[7006]
g["V1", "V2"]
V(g)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
g
prova <- "./../../../data/toyData/controls/withNoise/CTRL_barbatoa.txt"
pr <- read.graph((prova))
pr <- i_adjacencyFromFile(prova)
pr <- i_adjacencyFromFile(prova)
prova
prova <- "./../../../data/toyData/controls/withNoise/CTRL_amore.gml"
read.graph(prova, format="gml")
v1 <- V(g)[1]
v1
v1 <- V(g)[2]
v2 <- V(g)[2]
v1 <- V(g)[2]
g[v1.v2]
g[v1,v2]
v1 <- V(g)[2]
v2 <- V(g)[1]
g[v1,v2]
v2 <- V(g)$naame[1]
v2 <- V(g)$name[1]
v2
v1 <- V(g)$name[2]
g[v1,v2]
v2 <- V(g)$name[1]
library(igraph)
v2 <- V(g)$name[1]
v2
g[V(g)$name[1],v(g)$name[2]]
v2 <- V(g)$name[1]
v1 <- V(g)$name[2]
g[v1,v2]
g[V(g)$name[1],v(g)$name[2]]
g[v1,v2]
for(i in 1:7006) {
for (j in 1:7006) {
vi <- V(g)$name[i]
vj <- V(g)$name[j]
list[k] <- g[vi,vj]
k <- k+1
}
}
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
lista
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
l
losta
listya
lista
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
t.test(E(g)$weight)
tt <- t.test(E(g)$weight)
tt$p.value
g
g[90,90]
g[90,1]
g[90,]
E(g)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
print(lista
)
print(lista)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
if(numeric(g[v1,v1])) { print("Truth!"); } else {print("Folly.");}
if(numeric(g[v1,v1])) { print("Gioia") }
g[v1,v2]
g
v2 <- V(g)$name[2]
v1 <- V(g)$name[1]
g[v1,v2]
if(numeric(g[v1,v1])) { print("Gioia") }
numeric(g)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
l_values
tt <- t.test(l_values,0)
tt <- t.test(unlist(l_values),0)
l_values
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
tt <- t.test(unlist(l_values),0)
unlist(l_values)
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
unlist(l_values)
t.test(unlist(l_values),0)
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
t.test(unlist(l_values),0)
v <- 1:10
t.test(v,0)
v
v
str(v)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
tt <- t.test(l_values,mu=0)
debugSource('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
t.test(unlist(l_values),mu=0)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
install.packages("miscTools")
library(miscTools)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
help(insertRow
)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
m <- matrix(nrow=0Ã¹)
m <- matrix(nrow=0)
m <- matrix(nrow=0, ncol = 2)
m
m <- insertRow(m, 1)
m
m <- insertRow(m, 0)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Scrivania/neuroscience-master/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
library(igraph)
read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
warning()
warnings()
warnings()
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
?unlist
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
source("./getFile.R")
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (e in E(g)) { print(e[1]); print (e[2]); }
for (e in E(g)) { print (get.(e)) }
for (e in E(g)) { print (get.vertices(e)) }
print (get.edgelist(g))
g
edges <- get.edgelist(g)
edges
edges[1]
edges[2]
edges[1,1]
edges
edges["V1"]
edges["V2"]
edges
edges[1,]
edges[1,][1]
edges[1,][2]
g[edges[i,][1])
g[edges[i,][1]]
g[edges[1,][1]]
g["V1","V2"]
?insertrow
library(miscTools)
?insertrow
library(TopKLists)
?insertrow
?insertRow
cutOfEdge <- function(graph, edgesToRemove) {
lstEdges <- get.edgelist(graph)
for (e in edgesToRemove) {
if (lstEdges[i,][1] == e[1] & lstEdges[i,][2] == e[2]) {
removeEdge(graph, lstEdges[i,][1], lstEdges[i,][2])
}
}
}
cutOfEdge(g, c("V2","V2"))
E(g)
length(E(g))
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
length(E(g))
source("./../graphUtils.R", chdir = T)
cutOfEdge(g, c("V2","V2"))
length(E(g))
E(g)
g["V1,"V2"]
g["V1,"V3"]
g["V2,"V3"]
g["V1","V2"]
g["V2","V1"]
g["V1","V2"]
g
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
g
g[1]
g[1]$weight
g[1]
g[2]
g[3]
g[1,2]
g["V1","v2"]
g["V1","V2"]
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi <- list()
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi <- matrix(nrow = 0, ncol =2)
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi[1]
archiPresi[2]
g["V1"]
g["V1","V2"]
g[archiPresi[1],archiPresi[2]]
archiPresi
archiPresi[1]
archiPresi[2]
g[archiPresi[1],archiPresi[2]]
g[archiPresi[1],archiPresi[2]]
E(g)[1]
E(g)[1,][1]
E(g)[1,1]
E(g)[1,2]
E(g)[1][1]
E(g)$names
E(g)$name
E(g)$weight
E(g)
edges <- E(g)
edges
edges[1]
edges[1,][2]
edges <- get.edgelist(g)
edges[1,][2]
delete.edges()
g["V1","V2"] <- FALSE
E(g)
archiPresi
edges
for (e in archiPresi) {
i <- 1
for (e in archiPresi) {
if (e[1] == edges[i,][1] & e[2] == edges[i,][2]) { g[e[1],e[2]] <- FALSE }
}
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (e in archiPresi) {
if (e[1] == edges[i,][1] & e[2] == edges[i,][2]) { g[e[1],e[2]] <- FALSE }
}
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (e in archiPresi) {
if (e[1] == edges[i,][1] & e[2] == edges[i,][2]) { print ("True") }
}
e[1]
edges[1,][1]
for (e in archiPresi) {
if ((e[1] == edges[i,][1]) & (e[2] == edges[i,][2])) { print ("True") }
}
i <- 0
for (e in archiPresi) {
if ((e[1] == edges[i,][1]) & (e[2] == edges[i,][2])) { print ("True") }
}
if (e[1] == edges[1,][1]) { print("True") }
if (e[1] == edges[1,][2]) { print("True") }
if ((e[1] == edges[i,][1]) & (e[2] == edges[i,][2])) { print ("True") }
if ((e[1] == edges[i,][1])) { print ("True") }
if (e[1] == edges[1,][1]) { print ("True") }
if ((e[1] == edges[1,][1]) & (e[2] == edges[1,][2])) { print ("True") }
if ((e[1] == edges[1,][1]) & (e[2] == edges[1,][2])) { print ("True") }
if ((e[1] == edges[1,][1])) { print ("True") }
if ((e[1] == edges[1,][1]) && (e[2] == edges[1,][2])) { print ("True") }
if (e[1] == edges[1,][1] && e[2] == edges[1,][2]) { print ("True") }
for (e in archiPresi) {
if (e[1] == edges[1,][1] && e[2] == edges[1,][2]) { print ("True") }
}
if (e[1] == edges[1,][1] && e[2] == edges[1,][2]) { print ("True") }
if (e[1] == edges[1,][1]) { print ("True") }
if (e[2] == edges[1,][2]) { print ("True") }
edges[1,][2]
e[2]
e
archiPresi
for (e in archiPresi) { print(e[1]) }
for (e in archiPresi) { print(e[1,1]) }
for (e in archiPresi) { print(e[12]) }
for (e in archiPresi) { print(e[2]) }
for (e in archiPresi) { print(e) }
archiPresi[1]
archiPresi[2]
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi
archiPresi[1]
archiPresi[2]
archiPresi[1,][1]
archiPresi[1,][2]
for (i in 1:length(archiPresi)) {
length(archiPresi)
archiPresi$nrow
membership(archiPresi)
dim(archiPresi)[1]
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { print ("True") }
}
for (i in 1:dim(edgesToRemove)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { print ("True") }
}
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { g[archiPresi[i,][1], archiPresi[i,][2]] <- FALSE }
}
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { g[archiPresi[i,][1], archiPresi[i,][2]] <- FALSE }
}
g["V1","V2"]
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { g[archiPresi[i,][1], archiPresi[i,][2]] <- FALSE }
}
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
for (i in 1:2){ print (i) }
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
?write.graph
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/", format = "gml")
library(igraph)
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/", format = "gml")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format = "gml")
gg["V1","V2"]
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format = "gml")
gg["V1","V2"]
gg["V3","V4"]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
E(g)
length(E(g))
length(E(gg))
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
gg["V3","V4"]
source("./gen_ttest.R")
source("./gen_ttest.R")
archi <- matrix(nrow = 0, ncol = 2)
archi <- insertRow(archi, 1, c("V1","V2"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi <- matrix(nrow = 0, ncol = 2)
archi <- insertRow(archi, 1, c("V1","V2"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi
numRow <- dim(edgesToRemove)[1]
numRow <- dim(archi)[1]
numRow
for (i in 1:numRow) {
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
lstEdges <- get.edgelist(g)
lstEdges[1,[1]]
lstEdges[1,][1]
archi[1,][1]
quit()
archi <- matrix(nrow = 0, ncol = 2)
archi <- insertRow(archi, 1, c("V1","V2"))
library(miscTools)
library(TopKLists)
library(igraph)
archi <- insertRow(archi, 1, c("V1","V2"))
archi <- insertRow(archi, 1, c("V3","V4"))
g
lstEdges <- get.edgelist(g)
lstEdges
lstEdges[1,]
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
g["V1","V2"]
source("./gen_ttest.R")
g["V1","V2"]
source("./gen_ttest.R")
g["V1","V2"]
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format= "gml")
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
length(E(g))
length(E(gg))
g["V1","V2"]
gg["V1","V2"]
g["V3","V4"]
gg["V3","V4"]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format= "gml")
g["V1","V2"]
gg["V1","V2"]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format= "gml")
gg["V1","V2"]
gg["V3","V4"]
g["V1","V2"]
g["V3","V4"]
lstEdges <- get.edgelist(g)
lstEdges[-1,]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
lstEdges <- get.edgelist(g)
length(lstEdges)
ls()
archi
archiPresi <- matrix(nrow = 0, ncol =2)
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi[1,2]
archiPresi[1,1]
q()
q()
source("./gen_ttest.R")
exit
q()
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
help("array")
a <- array()
a
a[1]<-"a"
a[1]
a[2]<-"b"
a[2]
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
