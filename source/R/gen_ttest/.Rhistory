edges
edges[1]
edges[2]
edges[1,1]
edges
edges["V1"]
edges["V2"]
edges
edges[1,]
edges[1,][1]
edges[1,][2]
g[edges[i,][1])
g[edges[i,][1]]
g[edges[1,][1]]
g["V1","V2"]
?insertrow
library(miscTools)
?insertrow
library(TopKLists)
?insertrow
?insertRow
cutOfEdge <- function(graph, edgesToRemove) {
lstEdges <- get.edgelist(graph)
for (e in edgesToRemove) {
if (lstEdges[i,][1] == e[1] & lstEdges[i,][2] == e[2]) {
removeEdge(graph, lstEdges[i,][1], lstEdges[i,][2])
}
}
}
cutOfEdge(g, c("V2","V2"))
E(g)
length(E(g))
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
length(E(g))
source("./../graphUtils.R", chdir = T)
cutOfEdge(g, c("V2","V2"))
length(E(g))
E(g)
g["V1,"V2"]
g["V1,"V3"]
g["V2,"V3"]
g["V1","V2"]
g["V2","V1"]
g["V1","V2"]
g
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
g
g[1]
g[1]$weight
g[1]
g[2]
g[3]
g[1,2]
g["V1","v2"]
g["V1","V2"]
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi <- list()
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi <- matrix(nrow = 0, ncol =2)
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi[1]
archiPresi[2]
g["V1"]
g["V1","V2"]
g[archiPresi[1],archiPresi[2]]
archiPresi
archiPresi[1]
archiPresi[2]
g[archiPresi[1],archiPresi[2]]
g[archiPresi[1],archiPresi[2]]
E(g)[1]
E(g)[1,][1]
E(g)[1,1]
E(g)[1,2]
E(g)[1][1]
E(g)$names
E(g)$name
E(g)$weight
E(g)
edges <- E(g)
edges
edges[1]
edges[1,][2]
edges <- get.edgelist(g)
edges[1,][2]
delete.edges()
g["V1","V2"] <- FALSE
E(g)
archiPresi
edges
for (e in archiPresi) {
i <- 1
for (e in archiPresi) {
if (e[1] == edges[i,][1] & e[2] == edges[i,][2]) { g[e[1],e[2]] <- FALSE }
}
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (e in archiPresi) {
if (e[1] == edges[i,][1] & e[2] == edges[i,][2]) { g[e[1],e[2]] <- FALSE }
}
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (e in archiPresi) {
if (e[1] == edges[i,][1] & e[2] == edges[i,][2]) { print ("True") }
}
e[1]
edges[1,][1]
for (e in archiPresi) {
if ((e[1] == edges[i,][1]) & (e[2] == edges[i,][2])) { print ("True") }
}
i <- 0
for (e in archiPresi) {
if ((e[1] == edges[i,][1]) & (e[2] == edges[i,][2])) { print ("True") }
}
if (e[1] == edges[1,][1]) { print("True") }
if (e[1] == edges[1,][2]) { print("True") }
if ((e[1] == edges[i,][1]) & (e[2] == edges[i,][2])) { print ("True") }
if ((e[1] == edges[i,][1])) { print ("True") }
if (e[1] == edges[1,][1]) { print ("True") }
if ((e[1] == edges[1,][1]) & (e[2] == edges[1,][2])) { print ("True") }
if ((e[1] == edges[1,][1]) & (e[2] == edges[1,][2])) { print ("True") }
if ((e[1] == edges[1,][1])) { print ("True") }
if ((e[1] == edges[1,][1]) && (e[2] == edges[1,][2])) { print ("True") }
if (e[1] == edges[1,][1] && e[2] == edges[1,][2]) { print ("True") }
for (e in archiPresi) {
if (e[1] == edges[1,][1] && e[2] == edges[1,][2]) { print ("True") }
}
if (e[1] == edges[1,][1] && e[2] == edges[1,][2]) { print ("True") }
if (e[1] == edges[1,][1]) { print ("True") }
if (e[2] == edges[1,][2]) { print ("True") }
edges[1,][2]
e[2]
e
archiPresi
for (e in archiPresi) { print(e[1]) }
for (e in archiPresi) { print(e[1,1]) }
for (e in archiPresi) { print(e[12]) }
for (e in archiPresi) { print(e[2]) }
for (e in archiPresi) { print(e) }
archiPresi[1]
archiPresi[2]
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi
archiPresi[1]
archiPresi[2]
archiPresi[1,][1]
archiPresi[1,][2]
for (i in 1:length(archiPresi)) {
length(archiPresi)
archiPresi$nrow
membership(archiPresi)
dim(archiPresi)[1]
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { print ("True") }
}
for (i in 1:dim(edgesToRemove)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { print ("True") }
}
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { g[archiPresi[i,][1], archiPresi[i,][2]] <- FALSE }
}
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { g[archiPresi[i,][1], archiPresi[i,][2]] <- FALSE }
}
g["V1","V2"]
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
for (i in 1:dim(archiPresi)[1]) {
if (archiPresi[i,][1] == edges[1,][1] && archiPresi[i,][2] == edges[1,][2]) { g[archiPresi[i,][1], archiPresi[i,][2]] <- FALSE }
}
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
for (i in 1:2){ print (i) }
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
?write.graph
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/", format = "gml")
library(igraph)
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/", format = "gml")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format = "gml")
gg["V1","V2"]
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format = "gml")
gg["V1","V2"]
gg["V3","V4"]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
E(g)
length(E(g))
length(E(gg))
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
gg["V3","V4"]
source("./gen_ttest.R")
source("./gen_ttest.R")
archi <- matrix(nrow = 0, ncol = 2)
archi <- insertRow(archi, 1, c("V1","V2"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi <- matrix(nrow = 0, ncol = 2)
archi <- insertRow(archi, 1, c("V1","V2"))
archi <- insertRow(archi, 1, c("V3","V4"))
archi
numRow <- dim(edgesToRemove)[1]
numRow <- dim(archi)[1]
numRow
for (i in 1:numRow) {
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
lstEdges <- get.edgelist(g)
lstEdges[1,[1]]
lstEdges[1,][1]
archi[1,][1]
quit()
archi <- matrix(nrow = 0, ncol = 2)
archi <- insertRow(archi, 1, c("V1","V2"))
library(miscTools)
library(TopKLists)
library(igraph)
archi <- insertRow(archi, 1, c("V1","V2"))
archi <- insertRow(archi, 1, c("V3","V4"))
g
lstEdges <- get.edgelist(g)
lstEdges
lstEdges[1,]
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
g["V1","V2"]
source("./gen_ttest.R")
g["V1","V2"]
source("./gen_ttest.R")
g["V1","V2"]
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format= "gml")
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
length(E(g))
length(E(gg))
g["V1","V2"]
gg["V1","V2"]
g["V3","V4"]
gg["V3","V4"]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format= "gml")
g["V1","V2"]
gg["V1","V2"]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
source("./gen_ttest.R")
gg <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_tufano.gml", format= "gml")
gg["V1","V2"]
gg["V3","V4"]
g["V1","V2"]
g["V3","V4"]
lstEdges <- get.edgelist(g)
lstEdges[-1,]
g <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_tufano.gml", format = "gml")
lstEdges <- get.edgelist(g)
length(lstEdges)
ls()
archi
archiPresi <- matrix(nrow = 0, ncol =2)
archiPresi <- insertRow(archiPresi, 1, c("V1","V2"))
archiPresi[1,2]
archiPresi[1,1]
q()
q()
source("./gen_ttest.R")
exit
q()
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
help("array")
a <- array()
a
a[1]<-"a"
a[1]
a[2]<-"b"
a[2]
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source("./gen_ttest.R")
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
g1 <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml", format="gml")
g1
E(g1)
g1 <- read.graph("./../../../data/toyData/cutted_control_ttest/CTRL_amore.gml", format="gml")
g1
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
testOfRelevance (pathInP. "./../../../data/toyData/controls/withNoise/a/t_test_mask/t_test_mask_controls111.csv")
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
error()
errors()
tt
path1 <- "./../../../data/toyData/controls/withNoise/a//CTRL_amore.gml"
path1 <- "./../../../data/toyData/controls/withNoise/a//CTRL_barbatoa.gml"
path1 <- "./../../../data/toyData/controls/withNoise/a//CTRL_amore.gml"
path2 <- "./../../../data/toyData/controls/withNoise/a//CTRL_barbatoa.gml"
g1 <- read.graph(path1, format="gml")
g2 <- read.graph(path2, format="gml")
g1["V54", "V1"]
g2["V54", "V1"]
l <- c(0,0)
t.test(l, mu = 0)
r <- t.test(l, mu = 0)
r$p.value
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
g1["V54", "V1"]
g1["V54", "V1"]$weight
E(g1)
E(g1)%weight
E(g1)$weight
a <- E(g1)$weight
which(a == 0)
which(a == 0, arr.ind = T)
g1["V54", "V1", attr="weight"]
E(g1)
a <- E(g1)
a
write.csv(a)
write.csv(a, sep="")
write.table(a, sep="")
write.table(a, "./", sep="")
a
str(a)
write.table(get.edgelist(g1), "./", sep="")
get.edgelist(g1)
a <- get.edgelist(g1)
a
str(a)
write.table(a, "./", sep="")
write.table(a, sep="")
write.table(file= "./",  x = a, sep="")
write.table(file= "./a.csv",  x = a, sep="")
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
g1
g2
g2 <- g1
a$1 <- g1
a <- data.frame
a <- data.frame()
a
a$1 <- g1
e <- new.env()
e$a <- g1
e$b <- g2
a[[1]] <- g1
g1
b[[1]] <- g1
b <- list()
b[[1]] <- g1
b[[2]] <- g1
b[[¹]]
b[[1]]
b[[2]]
length(b)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
b
g
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
k <- 1 # Conta gli archi selezionati
l <- array()
files <- list.files(path = pathIn) # Prendo la lista dei nomi dei file nella directory
archiPresi <- matrix(nrow = 0, ncol = 2)
kr <- 1
listGraphs <- list()
k <- 1
for(i in 1:length(files)) { # Per ogni file
cfile <- paste(pathIn, files[k], sep="") # Recupero il nome completo, compreso di percorso
if(grepl(cfile, pattern = "*.gml")) {
g <- read.graph(cfile, format = "gml") # Recupero il grafo di questo file
listGraphs[[k]] <- g
k <- k +1
}
}
k <- 1 # Conta gli archi selezionati
l <- array()
files <- list.files(path = pathIn) # Prendo la lista dei nomi dei file nella directory
archiPresi <- matrix(nrow = 0, ncol = 2)
kr <- 1
pathInC <- "./../../../data/toyData/controls/withNoise/"
files <- list.files(path = pathInC) # take all files in pathIn
#creo una lista di oggetti grafo
listGraphs <- list()
k <- 1
for(i in 1:length(files)) { # Per ogni file
cfile <- paste(pathIn, files[k], sep="") # Recupero il nome completo, compreso di percorso
if(grepl(cfile, pattern = "*.gml")) {
g <- read.graph(cfile, format = "gml") # Recupero il grafo di questo file
listGraphs[[k]] <- g
k <- k +1
}
}
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
files <- list.files(path = pathIn)
files <- list.files(path = pathInC)
files
print(cfile)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
print(cfile)
files <- list.files(path = pathInC)
files
length(files)
listGraphs <- list()
listGraphs[[1]] <- 1
listGraphs[[1]] <- g
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
listGraphs
for(i in 1:length(files)) { # Per ogni file
cfile <- paste(pathIn, files[k], sep="") # Recupero il nome completo, compreso di percorso
cfile
if(grepl(cfile, pattern = "*.gml")) {
print("we")
print(cfile)
g <- read.graph(cfile, format = "gml") # Recupero il grafo di questo file
listGraphs[[k]] <- g
k <- k +1
}
}
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
?ttest
?t.test
source('~/.active-rstudio-document', echo=TRUE)
norm(c(1,5))
norm(c(1,5))
norm(c(1,5))
norm(c(1,5))
c(1,5)
norm
normalize.vector(a)
scale(a)
scaleaa)
a
a<-c(1,5)
scale(a)
?scale
rnorm(a)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
l_values
length(listGraphs)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
print(unlist(l_values))
print(unlist(l_values))
print(unlist(l_values))
print(unlist(l_values))
Q
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
l_values
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
l_values
