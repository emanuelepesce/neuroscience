source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)
E(g)%weight
E(g)$weight
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/pruningEdges.R', echo=TRUE)
R$v_util
R$n_util
R$v_util
source('~/.active-rstudio-document', echo=TRUE)
gu <- unlist(g)
gu
g[ยน]
g[1]
g[2]
g[3]
gu[3]
l_edges = matrix()
gu[4]
g[6]
g[7]
length(g)
length(g[1])
length(g[2])
g[1]
g[1,1]
length(g[[2])
length(g[[2]])
g[1]
g[[1,1]]
g[[1]][1]
g[[1]][2]
g[[1]][2]
a = g[[1]][2]
a
str(a)
toString(a)
a
toString(a)
paste("V",toString(a), sep = "")
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
matrix[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
l_edges = matrix(ncol = 2)
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
matrix[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
l_edges = matrix( ncol = 2)
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
ledges
l_edges
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
l_edges
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
k += 1
}
}
}
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
k += 1
}
}
}
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
k = k + 1
}
}
}
l_edges = matrix(nrow = R$n_util, ncol = 2)
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] <- paste("V",toString(i), sep = "")
l_edges[k, 2] <- paste("V",toString(g[[i]][j]), sep = "")
k = k + 1
}
}
}
l_edges
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
controlsLabels
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
controlsLabels
length(controlsLabels)
dim(controlsLabels)[1]
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml")
controlLabel <- labels
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml")
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml", format="gml")
labels<- patientsLabels
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
g
E(g)$strong
E(g)
E(g)$weight
E(g)$inverse
E(g)$strong
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
E(g)$strong
get.edge.ids
get.edge.ids()
get.edge.ids(g)
g
get.edgelist(g)
labels
print(v1)
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
print(v1)
g[v1, v2, attr="strong"] <- 1
}
for(i in 1:dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
E(g)$strong
set.edge.attribute(g, name, index=E(g), 0)
set.edge.attribute(g, "strong", index=E(g), 0)
E(g)$strong
set.edge.attribute(g, "strong", index=E(g), value =0)
E(g)$strong
set.edge.attribute(graph = g, name="strong", index=E(graph), value = 0)
set.edge.attribute(g, name="strong", index=E(graph), value = 0)
set.edge.attribute(g, name="strong", index=E(g), value = 0)
E(g)$strong
E(g)$"strong
""
"
E(g)$"strong"
E(g)$strong
set.edge.attribute(g, name="strong", index=E(g), value = 0)
g1 <- set.edge.attribute(g, name="strong", index=E(g), value = 0)
E(g1)$strong
E(g)
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml", format="gml")
g <- set.edge.attribute(g, name="strong", index=E(g), value = 0)
labels<- patientsLabels
for(i in 1:dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
g
E(g)$strong
E(g)$strong
E(g)
E(g)$strong
patientsLabels
g["V90", "V86"]
g["V90", "V86", attr ="strong"]
gl <- attachLabels(g, patientsLabels)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
gl
applyMaskDirectory <- function(pathIn, pathOut, labelC, labelP){
files <- list.files(path = pathIn) #take all files in pathIn
for(i in 1:length(files)){ #for each file
# take path + name and apply the mask
cfile <- paste(pathIn, files[i], sep="")
if(grepl(cfile, pattern = "*.gml")){
print(cfile)
g <- read.graph(cfile, format="gml")
g <- attachLabels(g, labelC, set = TRUE)
g <- attachLabels(g, labelP, set = FALSE)
# write the output
outfile <- paste(pathOut, files[i], sep="")
write.graph(g, outfile, format="gml")
}
}
}
applyMaskDirectory("./../../data/toyData/controls/", "./../../data/toyData/cutted_controls/c/")
applyAttachLabel <- function(pathIn, pathOut, labelC, labelP){
files <- list.files(path = pathIn) #take all files in pathIn
for(i in 1:length(files)){ #for each file
# take path + name and apply the mask
cfile <- paste(pathIn, files[i], sep="")
if(grepl(cfile, pattern = "*.gml")){
print(cfile)
g <- read.graph(cfile, format="gml")
g <- attachLabels(g, labelC, set = TRUE)
g <- attachLabels(g, labelP, set = FALSE)
# write the output
outfile <- paste(pathOut, files[i], sep="")
write.graph(g, outfile, format="gml")
}
}
}
applyAttachLabel("./../../data/toyData/controls/", "./../../data/toyData/cutted_controls/c/",
controlsLabels, patientsLabels)
applyAttachLabel("./../../data/toyData/cutted_controls/", "./../../data/toyData/cutted_controls/c/",
controlsLabels, patientsLabels)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
read.graph("./../../data/toyData/cutted_controls/CTRL_longo.gml", format = "gml")
a = read.graph("./../../data/toyData/cutted_controls/CTRL_longo.gml", format = "gml")
a
E(a)
E(a)$strong
a
a = read.graph("./../../data/toyData/cutted_controls/c/CTRL_longo.gml", format = "gml")
library(igraph)
a = read.graph("./../../data/toyData/cutted_controls/c/CTRL_longo.gml", format = "gml")
a = read.graph("./../../data/toyData/cutted_controls/c/CTRL_amore.gml", format = "gml")
a
E(a)$strong
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
#' @param labelC controls labels
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/checkNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
RC$v_util
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
controlsLabels
controlsLabels[1]
controlsLabels[1,2]
controlsLabels[1,1]
dim[controlsLabels][1]
dim(controlsLabels)[1]
cnt <- 0
for(i in dim(controlsLabels)[1]){
vs_c <- controlsLabels[i,1]
vt_c <- controlsLabels[i,2]
for (j in dim(controlsLabels[1])){
vs_p <- controlsLabels[i,1]
vt_p <- controlsLabels[i,2]
if((vs_c == vs_p) && (vt_c == vt_p)){
cnt += 1
}
}
}
cnt <- 0
if((vs_c == vs_p) && (vt_c == vt_p)){
cnt += 1
}
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
cnt
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
1:dim(patientsLabels[1])
dim(patientsLabels[1])
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
cnt
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
cnt
patientsLabels
controlsLabels
RC$v_util
RC$n_util
RP$n_util
RP$v_util
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
vs_c
vs_p
patientsLabels
RP$n_util
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
cnt
g <- read.graph("./../../data/toyData/cutted_controls/CTRL_amore.gml")
g <- read.graph("./../../data/toyData/cutted_controls/CTRL_amore.gml", format = "gml")
g
E(g)$weight
E(g)
g <- read.graph("./../../data/toyData/cutted_controls/CTRL_barbatoa.gml")
g <- read.graph("./../../data/toyData/cutted_controls/CTRL_barbatoa.gml", format = "gml")
E(g)
E(g)$weight
g <- i_adjacencyFromFile("./../../data/toyData/controls/CTRL_amore.txt")
g
E(g)$weight
mask <- read.csv(file = "./../../data/toyData/results/1_maskUnion/edgesMask.csv")
mask <- as.matrix(mask)
gm <- applyMask(g,mask)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
gm
E(g)$weight
E(gm)
E(gm)$weight
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
E(gm)
E(gm)$weight
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
E(gm)$weight
installed.packages("kerLab")
installed.packages("kerLab", dep = TRUE)
install.packages("kerlab", dep = TRUE)
install.packages("kernlab", dep = TRUE)
gm
get.adjacency(gm)
get.adjacency(gm, attr="weight")
M <- get.adjacency(gm, attr="weight")
class(M)
M[1,1]
M[2,2]
M[2,3]
dim(M)
M1 <- as.matrix(M)
M1
ugm <- as.undirected(gm, "collapse")
M <- get.adjacency(ugm, attr="weight")
M1 <- as.matrix(M)
M1
a <- specc(M1)
library(kernlab)
a <- specc(M1, 10)
a
source('~/Tesi/gitProject/neuroscience/source/R/a.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/a.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/a.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/a.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/a.R', echo=TRUE)
M1
cmdscale(M1)
d <- exp(-M1)
as.dist(d)
dd <- as.dist(d)
dd
fit <- cmdscale(dd, 2)
fit$points
fit
str(fit)
plot(fit[,1], fit[,2])
plot(fit[,1], fit[,2])
dev.off
dev.off()
dev.off()
plot(fit[,1], fit[,2])
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
ugm <- as.undirected(gm)
ugm <- as.undirected(gm, "collapse")
ugm <- as.undirected(gm, "collapse")
M <- get.adjacency(ugm)
M <- as.matrix(M)
D <- exp(-M)
ugm <- as.undirected(gm, "collapse")
M <- get.adjacency(ugm)
M <- as.matrix(M)
D <- as.dist(exp(-M))
fit <- cmdscale(D, 2)
plot(fit[,1], fit[,2])
rm(list=ls())
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
plot(fit[,1], fit[,2])
ugm <- as.undirected(gm, "collapse")
MA <- get.adjacency(ugm, attr="weight")
M <- as.matrix(MA)
D <- as.dist(exp(-M))
fit <- cmdscale(D, 2)
plot(fit[,1], fit[,2])
?specc
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
library(kernlab)
spc = specc(D, 4, kernel = "rbfdot")
spc = specc(M, 4, kernel = "rbfdot")
path = "./try/"
spc = specc(M, 4, kernel = "rbfdot")
spec_cl = spc@.Data
tab_spec = table(spec_cl)
for(i in 1:length(tab_spec)){
D_index = which(spec_cl==i)
yellow_g = subgraph(ugm, D_index)
lfr = layout.fruchterman.reingold(graph = yellow_g,niter=1000,
area=100 * vcount(yellow_g)^2)
pdf(paste(path,"cluster",i,".pdf",sep=""))
plot(yellow_g, layout = lfr)
dev.off()
}
?specc
spec
spc
D <- as.dist(1-M)
fit <- cmdscale(D, 2)
plot(fit[,1], fit[,2])
hist(M)
hist(M)
D <- as.dist(exp(-10*M))
fit <- cmdscale(D, 2)
plot(fit[,1], fit[,2])
D <- as.dist(exp(-20*M))
fit <- cmdscale(D, 2)
plot(fit[,1], fit[,2])
D <- as.dist(log(-M))
fit <- cmdscale(D, 2)
D <- as.dist(log(-M))
path = "./try/"
spc = specc(M, 10, kernel = "rbfdot")
spec_cl = spc@.Data
tab_spec = table(spec_cl)
for(i in 1:length(tab_spec)){
D_index = which(spec_cl==i)
yellow_g = subgraph(ugm, D_index)
lfr = layout.fruchterman.reingold(graph = yellow_g,niter=1000,
area=100 * vcount(yellow_g)^2)
pdf(paste(path,"cluster",i,".pdf",sep=""))
plot(yellow_g, layout = lfr)
dev.off()
}
