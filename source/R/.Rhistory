source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
g
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
m
str(m)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
str(m)
dat
View(dat)
View(dat)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
dat
source('~/Tesi/project/source/R/try.R', echo=TRUE)
m
str(m)
str(dat)
str(m)
m[1][1]
m[1][2]
m[1][3]
m[1,2]
m[1,3]
m[1,90]
source('~/Tesi/project/source/R/try.R', echo=TRUE)
g
source('~/Tesi/project/source/R/try.R', echo=TRUE)
str(m)
str(dat)
dim(dat)
dim(m)
dim(g)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
dim(m)
m[1,1]
m[90,1]
m[90,90]
m[90,89]
sum(m == 0)
8100-1094
ecount(g)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
g = graph.adjacency(m, mode = "undirected", weighted = TRUE)
plot.igraph(g)
g = graph.adjacency(m, mode = "undirected", weighted = TRUE, layout=layout.circle)
m = as.matrix(dat)
plot.igraph(g, layout=layout.circle)
?layout
plot.igraph(g, layout=layout.fruchterman.reingold)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
path = "./../../data/sampleNetworks/CTRL_amore.txt"
dat = read.csv(path, header = FALSE, sep = " ")
m = as.matrix(dat)
g = graph.adjacency(m, mode = "directed", weighted = TRUE)
g = graph.adjacency(m, mode = "undirected", weighted = TRUE)
library(igraph)
path = "./../../data/sampleNetworks/CTRL_amore.txt"
dat = read.csv(path, header = FALSE, sep = " ")
m = as.matrix(dat)
g = graph.adjacency(m, mode = "undirected", weighted = TRUE)
g = graph.adjacency(m, mode = "directed", weighted = TRUE)
vcount(g)
ecount(g)
plot.igraph(g, layout=layout.fruchterman.reingold)
plot.igraph(g, layout=layout.fruchterman.reingold)
write.graph(g, "graph.gml", format="gml"))
write.graph(g, "graph.gml", format="gml")
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
a.i= "a"
a.e="b"
a
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
centralities
is.weighted(g)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
source('~/Tesi/project/source/R/try.R', echo=TRUE)
g[1,1]
g[1,2]
?edges
edges(g)
get.edge.attribute(g, "weight")
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
ct$betw.v
ct$betw.e
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
ct$betw.e
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
lenght(cts)
length(cts)
dim(cts)
str(cts)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
source('~/Tesi/project/source/R/centrality.R', echo=TRUE)
length(cts)
source('~/Tesi/gitProject/neuroscience/R/smallword.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/R/smallword.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/R/smallword.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/R/smallword.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/centrality.R', echo=TRUE)
cts$betw.v
source('~/Tesi/gitProject/neuroscience/source/R/smallword.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/centrality.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/smallword.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
v
length(m)
v
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
v
data(TopKSpaceSampleInput)
input
str(input)
outBorda=Borda(input,space) #underlying space-dependent
outBorda
str(input)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
l
l[1]
l[2]
v
outBorda=Borda(l) #underlying space-dependent
outBorda$TopK
outBorda=Borda(l, k = 10) #underlying space-dependent
outBorda
length(outBorda$TopK)
dim(outBorda$TopK)
outBorda$TopK
list.files(path = "./../../data/toyData/controls/")
a  = list.files(path = "./../../data/toyData/controls/")
a[1]
a[2]
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
warnings()
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
x = ./../../data/toyData/controls/CTRL_amore.txt
x = "./../../data/toyData/controls/CTRL_amore.txt"
x
dat <- read.csv(x, header = FALSE, sep = " ")
warning()
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
warning()
warnings()
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
warnings()
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
outBorda$TopK
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
outBorda$TopK
outBorda$Scores
8100*23
8096*23
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
outBorda1=Borda(input)
outBorda1
as.list(outBorda$TopK)
as.list(outBorda1$TopK)
outBorda1=Borda(input)
utBorda2=Borda(input,space=input)
as.list(utBorda1$TopK)
as.list(utBorda2$TopK)
outBorda=Borda(input)
outBorda
outBorda=Borda(input, k = 10)
outBorda
input
outBorda=Borda(input)
outBorda
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/aggregationBorda.R', echo=TRUE)
=Borda
?Borda
outBorda$TopK
input
outBorda$TopK$mean
as.list(outBorda$TopK)
input
data(input)
library(TopKLists)
outBorda=Borda(input,space)
outBorda=Borda(input)
set.seed(1234)
L1=paste("Obj",1:30,sep="")
L2=paste("Obj",c(1:10,31:40,11:15),sep="")
L3=paste("Obj",c(1:10,16:20,11:15),sep="")
input=list(L1,L2,L3)
space1=space2=space3=paste("Obj",1:40,sep="")
space=list(space1,space2,space3)
L1
L2
outBorda=Borda(input,space)
?sort
input
