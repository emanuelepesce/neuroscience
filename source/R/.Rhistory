source('~/Tesi/gitProject/neuroscience/source/R/centrality.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/centrality.R', echo=TRUE)
cts
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
b <- betweenness(graph = g, directed = TRUE, weights = TRUE)
b <- betweenness(graph = g, directed = TRUE)
b <- betweenness(graph = g, directed = TRUE)
for(i in 1:length(E(g))){
if E(g)$weight[i] > 0){
print(i)
}
}
source('~/.active-rstudio-document', echo=TRUE)
for(i in 1:length(E(g))){
if (E(g)$weight[i] > 0){
print(i)
}
}
for(i in 1:length(E(g))){
if (E(g)$weight[i] < 0){
print(i)
}
}
library(igraph)
pathIn <- "./../../data/toyData/cutted_controls/CTRL_amore.gml"
g <- read.graph(pathIn, format="gml")
for(i in 1:length(E(g))){
if (E(g)$weight[i] < 0){
print(i)
}
}
pr.v <- page.rank(graph, directed = TRUE)
pr.v <- page.rank(g, directed = TRUE)
pr.v
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
cl
ind
b <- betweenness(graph = g, directed = TRUE)
b <- betweenness(graph = g, directed = TRUE, weights = E(g)$weight)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
# remove all edges from g
for(i in 1:V(g)){
for(j in 1:V(g)){
v1 <- V[g][i]
v2 <- V[g][j]
g[v1, v2] <- 0
}
}
V(g)
V(g)[1]
V(g)[2]
V(g)[3]
v1
v1
# remove all edges from g
for(i in 1:length(V(g))){
for(j in 1:length(V(g)){
v1 <- V[g][i]
v2 <- V[g][j]
g[v1, v2] <- 0
}
}
# remove all edges from g
for(i in 1:length(V(g))){
for(j in 1:length(V(g)){
v1 <- V[g][i]
v2 <- V[g][j]
g[v1, v2] <- 0
}
}
for(i in 1:length(V(g))){
for(j in 1:length(V(g)){
v1 <- V[g][i]
v2 <- V[g][j]
#     g[v1, v2] <- 0
}
}
for(i in 1:length(V(g))){
for(j in 1:length(V(g))){
v1 <- V[g][i]
v2 <- V[g][j]
#     g[v1, v2] <- 0
}
}
length(V(g)
)
for(i in 1:length(V(g))){
#   for(j in 1:length(V(g))){
#     v1 <- V[g][i]
#     v2 <- V[g][j]
# #     g[v1, v2] <- 0
#   }
}
# remove all edges from g
for(i in 1:length(V(g))){
for(j in 1:length(V(g))){
v1 <- V(g)[i]
v2 <- V(g)[j]
g[v1, v2] <- 0
}
}
b <- betweenness(graph = g, directed = TRUE, weights = E(g)$weight)
# remove all edges from g
for(i in 1:length(V(g))){
for(j in 1:length(V(g))){
v1 <- V(g)[i]
v2 <- V(g)[j]
g[v1, v2] <- 1
}
}
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
b
source('~/.active-rstudio-document', echo=TRUE)
b
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
read.csv(file = "./test.csv")
read.csv(file = "./test.csv", row.names = TRUE)
read.csv(file = "./test.csv", header = "TRUE")
read.csv(file = "./test.csv", header = TRUE)
read.table(file = "./test.csv", header = TRUE)
a =read.table(file = "./test.csv", header = TRUE)
a
dim(a)
a =read.table(file = "./test.csv")
a
a =read.table(file = "./test.csv", sep=",")
a
dim(a)
a =read.table(file = "./test.csv", sep=",", row.names = FALSE)
a =read.table(file = "./test.csv", sep=",")
R.version()
?version
R.Version()
nx.average_shortest_path_length(g)
nx.average_shortest_path_length(g, weight= True=
nx.average_shortest_path_length(g, weight= True)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
hist(pr)
hist(pr$vector)
hist(pr$degree)
hist(ind)
hist(cl)
hist(pr$vector)
?hist
hist(pr$vector, breaks=seq(0.1,0.2,by = 0.01))
hist(pr$vector, breaks=seq(0.1,0.2,by = 0.01))
hist(pr$vector
)
hist(pr$vector, breaks=seq(0.001,0.02,by = 0.002))
hist(pr$vector, breaks=c(100,200))
hist(pr$vector, breaks=c(0.005,0.015))
hist(pr$vector, breaks=c(0.005,0.015))
hist(pr$vector)
lines(density(pr$vector))
hist(pr$vector)
lines(density(pr$vector))
source('~/.active-rstudio-document', echo=TRUE)
hist(pr$vector, ylim = c(0,40))
lines(density(pr$vector))
hist(pr$vector, ylim = c(0,90))
lines(density(pr$vector))
hist(pr$vector, ylim = c(0,100))
lines(density(pr$vector))
?density
hist(pr$vector, ylim = c(0,100), breaks = 5)
lines(density(pr$vector))
hist(pr$vector, ylim = c(0,100), breaks = 10)
lines(density(pr$vector))
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
x = pr$vector
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
p1 = "./../../data/toyData/cutted_controls/CTRL_amore.gml"
read.graph(p1, format = "gml")
E(g)$weight
p1 = "./../../data/toyData/cutted_controls/CTRL_barbatoa.gml"
p1 = "./../../data/toyData/cutted_controls/CTRL_barbatoa.gml"
read.graph(p1, format = "gml")
E(g)$weight
p1 = "./../../data/toyData/cutted_controls/CTRL_barbatoa.gml"
p2 = "./../../data/toyData/cutted_controls/CTRL_barbatoa.gml"
read.graph(p1, format = "gml")
read.graph(p2, format = "gml")
g2 = read.graph(p2, format = "gml")
g1 = read.graph(p1, format = "gml")
g2
g2
E(g2)
cbind(E(g2)$weight, E(g1$weight))
cbind(E(g2)$weight, E(g1)$weight)
p1 = "./../../data/toyData/cutted_controls/CTRL_barbatoa.gml"
p2 = "./../../data/toyData/cutted_controls/CTRL_amore.gml"
g1 = read.graph(p1, format = "gml")
g2 = read.graph(p2, format = "gml")
cbind(E(g2)$weight, E(g1)$weight)
average.path.length(g1)
average.path.length(g2)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
e_list
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
d
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
d
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
d
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
d
g["V87", "V1"]
g["V87", "V2"]
g["V87", "V3"]
V(g)
V(g)[ยน]
V(g)[1]
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
V(g)
len(V(g))
dim(V[g])
dim(V[g])[ยน]
dim(V[g])[1]
dim((g))[1]
dim((g))
dim(V(g))
str(V(g))
dim(V(g))
length(V(g))
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
g["V87", "V1"]$weight
g["V87", "V1"]["weight"]
g["V86", "V1"]["weight"]
g["V86", "V1"]["weight"]
g["V86", "V1", attr = "weight"]
g["V86", "V2", attr = "weight"]
g["V86", "V6", attr = "weight"]
g["V86", "V50", attr = "weight"]
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
g["V1", "V2", attr = "weight"]
E(g)$weight
g["V1", "V2", attr = "weight"]
e_list
g["90", "87", attr = "weight"]
g["90", "v87", attr = "weight"]
g["V90", "V87", attr = "weight"]
neighbors(g, "V1")
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
nrb <- neighbors(g, v)
nrb
nrb[ยน]
nrb[1]
nrb[2]
nrb[5]
nrb[6]
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
vt
v
nrb <- neighbors(g, v)
nrb
g[v, vt, attr = "weight"]
g["V90", "V89", attr = "weight"]
debugSource('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
v
vt
get.vertex.attribute(g, "name", 7)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
vt
v
g[v, vt, attr = "weight"]
g["V1", "V7", attr = "weight"]
v
v[1]
v[1,1]
v
v[1]
debugSource('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
v
V(g)[i]
V(g)[i]$name
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
E(g)$weight
E(g)$weight[1]
l = E(g)$weight[1]
which.min(l)
l[1]
l
l = E(g)$weight
which.min(l)
l[57]
10e-05
1e-05
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
"inf" <= 0
1e-5
1e-5*2
1e-5*0.1
1e-5*
x
str(1e-5)
is.numeric(1e-5)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)$weight
E(g)$weight[6000]
E(g)$weight[6000] <= 0
E(g)$weight[6000] <= 0
E(g)$weight[6000] <= != NA
is.null(E(g)$weight[6000] <= != NA)
is.null(E(g)$weight[6000])
E(g)$weight[6000]
E(g)$weight[6000]
E(g)$weight
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)$weight
v = E(g)$weight[6000]
v
is.null(v)
typeof(v)
v != NaN
v
NaN
v == NaN
v <= 0
if(v<= 0){
}
if(v<= 0){
}
if(is.null(v)){
}
if(is.null(v)){
}
if(is.null(v)){
}
if(is.null(v)){
print("ciao")
}
if(is.null(v)){
print("ciao")
}
if(!is.null(v)){
print("ciao")
}
if(!is.null(v)){
print("ciao")
}
is.numeric(v)
v
is.nan(v1)
is.nan(v)
!is.nan(v)
if (is.finite(w))
{}
is.finite(v)
if (!is.finite(v) && v <= 0){
]
if (!is.finite(v) && v <= 0){
}
if (is.finite(v) && v <= 0){
}
if (is.finite(v) && v <= 0){
}
if (is.finite(v) && v <= 0){
print(v)
}
if (is.finite(v) && v <= 0){
print(v)
}
v1 = 1
if (is.finite(v1) && v1 <= 0){
print(v)
}
if (is.finite(v1) && v1 <= 0){
print(v1)
}
is.finite(1)
E(g)$weight[ยน]
E(g)$weight[1]
is.finite(E(g)$weight[1])
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R')
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
grepl("s.txt", "*.txt")
grepl("s.txt", "*.txt")
grepl("s.txt", "s.txt")
grepl("s.txt", pattern = "*.txt")
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
Inf
is.finite(Inf)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
w = 0.091854
if (is.finite(w)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}
}
if (is.finite(0)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}
}
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
g["V86", "V90"]
g["V86", "V90", attr = weight]
g["V86", "V90", attr = "weight]
g["V86", "V90", attr = "weight"]
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g["V86", "V90"]
w = g["V86", "V90"]
if (is.finite(w)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}
g[v, vt, attr = "weight"]
g[v, vt, attr = "weight"]
}
if (is.finite(w)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}}
if (is.finite(w)){
if (w <= 0){
print("we")
}}
if (is.finite(w)){
if (w <= 0){
print("we")
}}
is.finite(w)
(w <= 0
)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
g["V86", "V90"]
g["V87", "V1"]
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
nrb
nrb
g
nrb <- neighbors(g, "V87")
nrb
length(nrb)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)
E(g)%weight
E(g)$weight
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
