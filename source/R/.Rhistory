V(g)[i]$name
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
E(g)$weight
E(g)$weight[1]
l = E(g)$weight[1]
which.min(l)
l[1]
l
l = E(g)$weight
which.min(l)
l[57]
10e-05
1e-05
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
"inf" <= 0
1e-5
1e-5*2
1e-5*0.1
1e-5*
x
str(1e-5)
is.numeric(1e-5)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)$weight
E(g)$weight[6000]
E(g)$weight[6000] <= 0
E(g)$weight[6000] <= 0
E(g)$weight[6000] <= != NA
is.null(E(g)$weight[6000] <= != NA)
is.null(E(g)$weight[6000])
E(g)$weight[6000]
E(g)$weight[6000]
E(g)$weight
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)$weight
v = E(g)$weight[6000]
v
is.null(v)
typeof(v)
v != NaN
v
NaN
v == NaN
v <= 0
if(v<= 0){
}
if(v<= 0){
}
if(is.null(v)){
}
if(is.null(v)){
}
if(is.null(v)){
}
if(is.null(v)){
print("ciao")
}
if(is.null(v)){
print("ciao")
}
if(!is.null(v)){
print("ciao")
}
if(!is.null(v)){
print("ciao")
}
is.numeric(v)
v
is.nan(v1)
is.nan(v)
!is.nan(v)
if (is.finite(w))
{}
is.finite(v)
if (!is.finite(v) && v <= 0){
]
if (!is.finite(v) && v <= 0){
}
if (is.finite(v) && v <= 0){
}
if (is.finite(v) && v <= 0){
}
if (is.finite(v) && v <= 0){
print(v)
}
if (is.finite(v) && v <= 0){
print(v)
}
v1 = 1
if (is.finite(v1) && v1 <= 0){
print(v)
}
if (is.finite(v1) && v1 <= 0){
print(v1)
}
is.finite(1)
E(g)$weight[ยน]
E(g)$weight[1]
is.finite(E(g)$weight[1])
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R')
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
grepl("s.txt", "*.txt")
grepl("s.txt", "*.txt")
grepl("s.txt", "s.txt")
grepl("s.txt", pattern = "*.txt")
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
Inf
is.finite(Inf)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
w = 0.091854
if (is.finite(w)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}
}
if (is.finite(0)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}
}
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
g["V86", "V90"]
g["V86", "V90", attr = weight]
g["V86", "V90", attr = "weight]
g["V86", "V90", attr = "weight"]
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g["V86", "V90"]
w = g["V86", "V90"]
if (is.finite(w)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}
g[v, vt, attr = "weight"]
g[v, vt, attr = "weight"]
}
if (is.finite(w)){
if (w <= 0){
g[v, vt, attr = "weight"] <- 1e-05
}}
if (is.finite(w)){
if (w <= 0){
print("we")
}}
if (is.finite(w)){
if (w <= 0){
print("we")
}}
is.finite(w)
(w <= 0
)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
g["V86", "V90"]
g["V87", "V1"]
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
nrb
nrb
g
nrb <- neighbors(g, "V87")
nrb
length(nrb)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
g
E(g)
E(g)%weight
E(g)$weight
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/TRY.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/pruningEdges.R', echo=TRUE)
R$v_util
R$n_util
R$v_util
source('~/.active-rstudio-document', echo=TRUE)
gu <- unlist(g)
gu
g[ยน]
g[1]
g[2]
g[3]
gu[3]
l_edges = matrix()
gu[4]
g[6]
g[7]
length(g)
length(g[1])
length(g[2])
g[1]
g[1,1]
length(g[[2])
length(g[[2]])
g[1]
g[[1,1]]
g[[1]][1]
g[[1]][2]
g[[1]][2]
a = g[[1]][2]
a
str(a)
toString(a)
a
toString(a)
paste("V",toString(a), sep = "")
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
matrix[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
l_edges = matrix(ncol = 2)
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
matrix[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
l_edges = matrix( ncol = 2)
k = 1
for( i in 1:length(g)){
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
ledges
l_edges
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
#         matrix[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
}
}
}
l_edges
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
k += 1
}
}
}
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
k += 1
}
}
}
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] = paste("V",toString(i), sep = "")
l_edges[k, 2] = paste("V",toString(g[[i]][j]), sep = "")
k = k + 1
}
}
}
l_edges = matrix(nrow = R$n_util, ncol = 2)
k = 1
for( i in 1:length(g)){
print(i)
if (length(g[[i]]) > 1){
for (j in 2:length(g[[i]])){ #first element is i
l_edges[k, 1] <- paste("V",toString(i), sep = "")
l_edges[k, 2] <- paste("V",toString(g[[i]][j]), sep = "")
k = k + 1
}
}
}
l_edges
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
controlsLabels
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
controlsLabels
length(controlsLabels)
dim(controlsLabels)[1]
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml")
controlLabel <- labels
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml")
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml", format="gml")
labels<- patientsLabels
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
g
E(g)$strong
E(g)
E(g)$weight
E(g)$inverse
E(g)$strong
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
E(g)$strong
get.edge.ids
get.edge.ids()
get.edge.ids(g)
g
get.edgelist(g)
labels
print(v1)
for(i in dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
print(v1)
g[v1, v2, attr="strong"] <- 1
}
for(i in 1:dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
E(g)$strong
set.edge.attribute(g, name, index=E(g), 0)
set.edge.attribute(g, "strong", index=E(g), 0)
E(g)$strong
set.edge.attribute(g, "strong", index=E(g), value =0)
E(g)$strong
set.edge.attribute(graph = g, name="strong", index=E(graph), value = 0)
set.edge.attribute(g, name="strong", index=E(graph), value = 0)
set.edge.attribute(g, name="strong", index=E(g), value = 0)
E(g)$strong
E(g)$"strong
""
"
E(g)$"strong"
E(g)$strong
set.edge.attribute(g, name="strong", index=E(g), value = 0)
g1 <- set.edge.attribute(g, name="strong", index=E(g), value = 0)
E(g1)$strong
E(g)
g <- read.graph(file = "./../../data/toyData/cutted_controls/CTRL_amore.gml", format="gml")
g <- set.edge.attribute(g, name="strong", index=E(g), value = 0)
labels<- patientsLabels
for(i in 1:dim(controlsLabels)[1]){
v1 <- labels[i,1]
v2 <- labels[i,2]
g[v1, v2, attr="strong"] <- 1
}
g
E(g)$strong
E(g)$strong
E(g)
E(g)$strong
patientsLabels
g["V90", "V86"]
g["V90", "V86", attr ="strong"]
gl <- attachLabels(g, patientsLabels)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
gl
applyMaskDirectory <- function(pathIn, pathOut, labelC, labelP){
files <- list.files(path = pathIn) #take all files in pathIn
for(i in 1:length(files)){ #for each file
# take path + name and apply the mask
cfile <- paste(pathIn, files[i], sep="")
if(grepl(cfile, pattern = "*.gml")){
print(cfile)
g <- read.graph(cfile, format="gml")
g <- attachLabels(g, labelC, set = TRUE)
g <- attachLabels(g, labelP, set = FALSE)
# write the output
outfile <- paste(pathOut, files[i], sep="")
write.graph(g, outfile, format="gml")
}
}
}
applyMaskDirectory("./../../data/toyData/controls/", "./../../data/toyData/cutted_controls/c/")
applyAttachLabel <- function(pathIn, pathOut, labelC, labelP){
files <- list.files(path = pathIn) #take all files in pathIn
for(i in 1:length(files)){ #for each file
# take path + name and apply the mask
cfile <- paste(pathIn, files[i], sep="")
if(grepl(cfile, pattern = "*.gml")){
print(cfile)
g <- read.graph(cfile, format="gml")
g <- attachLabels(g, labelC, set = TRUE)
g <- attachLabels(g, labelP, set = FALSE)
# write the output
outfile <- paste(pathOut, files[i], sep="")
write.graph(g, outfile, format="gml")
}
}
}
applyAttachLabel("./../../data/toyData/controls/", "./../../data/toyData/cutted_controls/c/",
controlsLabels, patientsLabels)
applyAttachLabel("./../../data/toyData/cutted_controls/", "./../../data/toyData/cutted_controls/c/",
controlsLabels, patientsLabels)
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
read.graph("./../../data/toyData/cutted_controls/CTRL_longo.gml", format = "gml")
a = read.graph("./../../data/toyData/cutted_controls/CTRL_longo.gml", format = "gml")
a
E(a)
E(a)$strong
a
a = read.graph("./../../data/toyData/cutted_controls/c/CTRL_longo.gml", format = "gml")
library(igraph)
a = read.graph("./../../data/toyData/cutted_controls/c/CTRL_longo.gml", format = "gml")
a = read.graph("./../../data/toyData/cutted_controls/c/CTRL_amore.gml", format = "gml")
a
E(a)$strong
source('~/Tesi/gitProject/neuroscience/source/R/addLabelsSW.R', echo=TRUE)
#' @param labelC controls labels
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/checkNoise.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/applyMask.R', echo=TRUE)
